"""Drop update_read_logs and create lesson_read_logs

Revision ID: ab167799501f
Revises: ad83291d7542
Create Date: 2025-09-05 12:21:43.792196

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ab167799501f'
down_revision = 'ad83291d7542'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lesson_read_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lesson_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('guest_name', sa.String(length=100), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons_learned.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('update_read_logs')
    # Delete records with null update_id before making it NOT NULL
    op.execute("DELETE FROM read_logs WHERE update_id IS NULL")
    with op.batch_alter_table('read_logs', schema=None) as batch_op:
        batch_op.alter_column('update_id',
               existing_type=sa.VARCHAR(length=32),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('read_logs_lesson_id_fkey'), type_='foreignkey')
        batch_op.drop_column('lesson_id')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('read_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('lesson_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('read_logs_lesson_id_fkey'), 'lessons_learned', ['lesson_id'], ['id'], ondelete='CASCADE')
        batch_op.alter_column('update_id',
               existing_type=sa.VARCHAR(length=32),
               nullable=True)

    op.create_table('update_read_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('update_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('guest_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['update_id'], ['updates.id'], name=op.f('update_read_logs_update_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('update_read_logs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('update_read_logs_pkey'))
    )
    op.drop_table('lesson_read_logs')
    # ### end Alembic commands ###
